
import DAO.CategoryDAO;
import DAO.ProductDAO;
import DTO.Category;
import DTO.ListCategory;
import DTO.ListProduct;
import DTO.Product;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Admin
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    ListCategory list;
    ListProduct list2;
    boolean check = false;

    public MainFrame() {
        initComponents();
        loadListCate();
        //Set up button in Product section
        btnNewPro.setEnabled(false);
        btnDeletePro.setEnabled(false);
        btnSavePro.setEnabled(false);
    }

    //Load items into Jlist
    private void loadListCate() {
        //Set up ListCate and cbCate
        DefaultListModel model = new DefaultListModel();
        DefaultComboBoxModel model2 = new DefaultComboBoxModel();
        list = CategoryDAO.getAllCate();
        if (!list.isEmpty()) {
            for (Category category : list.getList()) {
                //Only add Category's name into JList
                model.addElement(category.getName());
                model2.addElement(category.getName());
            }
        }
        ListCate.setModel(model);
        cbCate.setModel(model2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        ListCate = new javax.swing.JList<>();
        jScrollPane4 = new javax.swing.JScrollPane();
        TableProduct = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        btnNewCate = new javax.swing.JButton();
        btnSaveCate = new javax.swing.JButton();
        btnDeleteCate = new javax.swing.JButton();
        cbCate = new javax.swing.JComboBox<>();
        txtID = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        txtQuantity = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        btnNewPro = new javax.swing.JButton();
        btnSavePro = new javax.swing.JButton();
        btnDeletePro = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Program Manager Product");
        setResizable(false);

        ListCate.setBorder(javax.swing.BorderFactory.createTitledBorder("Product Category"));
        ListCate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ListCate.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        ListCate.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        ListCate.setToolTipText("");
        ListCate.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                ListCateValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(ListCate);

        TableProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Product ID", "Product Name", "Quantity", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TableProduct.getTableHeader().setReorderingAllowed(false);
        TableProduct.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableProductMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(TableProduct);
        if (TableProduct.getColumnModel().getColumnCount() > 0) {
            TableProduct.getColumnModel().getColumn(0).setResizable(false);
            TableProduct.getColumnModel().getColumn(1).setResizable(false);
            TableProduct.getColumnModel().getColumn(2).setResizable(false);
            TableProduct.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel1.setText("Category");

        jLabel2.setText("Product ID");

        jLabel3.setText("Product Name");

        jLabel4.setText("Quantity");

        jLabel5.setText("Price");

        btnNewCate.setText("New Category");
        btnNewCate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewCateActionPerformed(evt);
            }
        });

        btnSaveCate.setText("Save Category");
        btnSaveCate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveCateActionPerformed(evt);
            }
        });

        btnDeleteCate.setText("Delete Category");
        btnDeleteCate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteCateActionPerformed(evt);
            }
        });

        cbCate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbCate.setEnabled(false);

        txtID.setEnabled(false);

        txtName.setEnabled(false);

        txtQuantity.setEnabled(false);

        txtPrice.setEnabled(false);

        btnNewPro.setText("New");
        btnNewPro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewProActionPerformed(evt);
            }
        });

        btnSavePro.setText("Save");
        btnSavePro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveProActionPerformed(evt);
            }
        });

        btnDeletePro.setText("Delete");
        btnDeletePro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteProActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnNewCate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSaveCate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeleteCate)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtQuantity))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtName))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtID))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cbCate, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnNewPro)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnSavePro)
                                        .addGap(35, 35, 35)
                                        .addComponent(btnDeletePro))
                                    .addComponent(txtPrice))))
                        .addGap(0, 49, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbCate, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNewCate)
                    .addComponent(btnSaveCate)
                    .addComponent(btnDeleteCate)
                    .addComponent(btnNewPro)
                    .addComponent(btnSavePro)
                    .addComponent(btnDeletePro)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ListCateValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_ListCateValueChanged
        // TODO add your handling code here:
        String selected = ListCate.getSelectedValue();
        int line = ListCate.getSelectedIndex();
        String delCate = null;

        for (int i = 0; i < list.Count(); i++) {
            //Compare selected name to all name of Categories in list
            //  to load Product table            
            if (selected.equalsIgnoreCase(list.getList().get(i).getName())) {
                delCate = list.getList().get(i).getID();
                break;
            }
        }

        //Get Products belong to the Category                               
        list2 = ProductDAO.getAllPro(delCate);
        //Create Vector to trans 
        Vector header = new Vector(); //Columns
        Vector data = new Vector(); //Rows
        header.add("Product ID");
        header.add("Product Name");
        header.add("Quantity");
        header.add("Price");
        if (!list2.isEmpty()) {
            for (Product product : list2.getList()) {
                Vector row = new Vector();
                row.add(product.getID());
                row.add(product.getName());
                row.add(product.getQuantity());
                row.add(product.getPrice());
                data.add(row);
            }
        }
        //Set Table
        DefaultTableModel model = (DefaultTableModel) TableProduct.getModel();
        model.setDataVector(data, header);

        //Open functions for Product
        btnNewPro.setEnabled(true);
        btnDeletePro.setEnabled(true);
        btnSavePro.setEnabled(true);

        //Set cbBox
        cbCate.setSelectedIndex(line);
    }//GEN-LAST:event_ListCateValueChanged

    private void TableProductMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableProductMouseClicked
        // TODO add your handling code here:
        //Get the selected row
        int pos = TableProduct.getSelectedRow();
        //Print out the infor of product in the Product section
        if (pos >= 0) {
            cbCate.setSelectedItem(ListCate.getSelectedValue());
            txtID.setText((String) TableProduct.getValueAt(pos, 0));
            txtName.setText((String) TableProduct.getValueAt(pos, 1));
            txtQuantity.setText("" + TableProduct.getValueAt(pos, 2));
            txtPrice.setText("" + TableProduct.getValueAt(pos, 3));
        }
    }//GEN-LAST:event_TableProductMouseClicked

    private void btnNewCateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewCateActionPerformed
        // TODO add your handling code here:
        NewCategory cate = new NewCategory(this, true);
        cate.setVisible(true);

        //Update immediatlly to the Category tab             
        loadListCate();
    }//GEN-LAST:event_btnNewCateActionPerformed

    private void btnSaveCateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveCateActionPerformed
        // TODO add your handling code here:        
        NewCategory cate = new NewCategory(this, true);
        cate.setVisible(true);
        
        //Update immediatlly to the Category tab             
        loadListCate();
    }//GEN-LAST:event_btnSaveCateActionPerformed

    private void btnDeleteCateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteCateActionPerformed
        // TODO add your handling code here:

        String selected = ListCate.getSelectedValue();
        if (!selected.equalsIgnoreCase(null)) {
            String selectedID = null;
            for (int i = 0; i < list.Count(); i++) {
                //Compare selected name to all name of Categories in list
                //  to load Product table            
                if (selected.equalsIgnoreCase(list.getList().get(i).getName())) {
                    //Get Products belong to the Category                               
                    selectedID = list.getList().get(i).getID();
                }
            }

            try {
                //Ask if the user intend to delete or not 
                int result = JOptionPane.showConfirmDialog(null, "Do you want to delete "
                        + "this Category", "warning", JOptionPane.OK_CANCEL_OPTION);
                if (result == JOptionPane.OK_OPTION) {
                    if (CategoryDAO.deleteCategory(selectedID)) {
                        JOptionPane.showMessageDialog(null, "Delete this Category successfully !!");
                    }
                }

            } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }

            //Delete all Products belong to that Cate
            try {
                if (ProductDAO.deleteProductBYCategory(selectedID)) {

                }
            } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }

            //Update immediatlly to the Category tab
            loadListCate();
            System.out.println(ListCate.getMaxSelectionIndex());

            /*After deleting a Cate, auto select the first line
        If there is no more Cate, auto not select ay line
             */
            if (ListCate.getMinSelectionIndex() == 0) {
                ListCate.setSelectedIndex(0);
            } else {
                ListCate.setSelectedIndex(-1);
            }
        }
        else JOptionPane.showMessageDialog(null, "Please choose a Category !!");

    }//GEN-LAST:event_btnDeleteCateActionPerformed

    private void btnNewProActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewProActionPerformed
        // TODO add your handling code here:
        //Check if there is any Category is being chosen

        if (!check) {
            //At first click, enable all true for inserting informations
            //cbCate.setEnabled(true);
            txtID.setEnabled(true);
            txtName.setEnabled(true);
            txtQuantity.setEnabled(true);
            txtPrice.setEnabled(true);
            check = true;
        } else {
            //Second click, check info -> add pro -> setEnable all control false
            //Check if user fullfill info or not 
            if (txtID.getText() == null || txtName.getText() == null
                    || txtQuantity.getText() == null || txtPrice.getText() == null) {
                JOptionPane.showMessageDialog(null, "Please fullfill the information !!");
            } else {
                //Check info
                String cate = (String) cbCate.getSelectedItem();
                String ID = txtID.getText();
                String name = txtName.getText();
                int quantity = Integer.parseInt(txtQuantity.getText());
                int price = Integer.parseInt(txtPrice.getText());
                String categoryID = null;

                //Get categoryID
                for (int i = 0; i < list.Count(); i++) {
                    if (cate.equalsIgnoreCase(list.getList().get(i).getName())) {
                        categoryID = list.getList().get(i).getID();
                    }
                }

                //Add a product
                try {
                    if (ProductDAO.addProduct(ID, name, quantity, price, categoryID)) {
                        JOptionPane.showMessageDialog(null, "Added new product to Category successfully !!");
                    }
                } catch (ClassNotFoundException | SQLException ex) {
                    JOptionPane.showMessageDialog(null, ex.getMessage());
                }

                //setEnable false
                check = false;
                txtID.setEnabled(false);
                txtName.setEnabled(false);
                txtQuantity.setEnabled(false);
                txtPrice.setEnabled(false);
            }
        }


    }//GEN-LAST:event_btnNewProActionPerformed

    private void btnSaveProActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveProActionPerformed
        // TODO add your handling code here:
        /*Check if ProID is existed, than btnSave is for updating
        if not, btnSave is for saving to database 
         */


    }//GEN-LAST:event_btnSaveProActionPerformed

    private void btnDeleteProActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteProActionPerformed
        // TODO add your handling code here:
        String ID = txtID.getText();
        try {
            if (ProductDAO.deleteProduct(ID)) {
                JOptionPane.showMessageDialog(null, "Deleted Product from the Category successfully !!");
            }
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_btnDeleteProActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> ListCate;
    private javax.swing.JTable TableProduct;
    private javax.swing.JButton btnDeleteCate;
    private javax.swing.JButton btnDeletePro;
    private javax.swing.JButton btnNewCate;
    private javax.swing.JButton btnNewPro;
    private javax.swing.JButton btnSaveCate;
    private javax.swing.JButton btnSavePro;
    private javax.swing.JComboBox<String> cbCate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables

}
